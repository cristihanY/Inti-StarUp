{"version":3,"sources":["webpack:///src/app/core/services/categories.service.ts","webpack:///src/app/core/services/compra.service.ts","webpack:///src/app/core/services/user.service.ts","webpack:///src/app/utils/validators.ts"],"names":["CategoriesService","http","get","url_api","id","data","post","put","name","providedIn","CompraService","venta","console","log","JSON","stringify","headers","UserService","apiUrl","dto","MyValidators","control","value","price_invalid","containsNumber","invalid_password","password","confirmPassword","match_password","service","checkCategory","pipe","response","isAvailable","not_Available","split","find","v","isNumber","undefined","isNaN","parseInt"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Category} from '../models/category.model';\nimport { environment } from './../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoriesService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n\n\n  getAllCategories(){\n    return this.http.get<Category[]>(`${environment.url_api}category/all`);\n  }\n\n  getCategory(id: string){\n    return this.http.get<Category>(`${environment.url_api}category/${id}`);\n  }\n  createCategory(data: Partial<Category>){\n    return this.http.post<Category>(`${environment.url_api}category/save/`, data);\n  }\n  updateCategory(id: string, data: Partial<Category>){\n    return this.http.put<Category>(`${environment.url_api}category/categories/${id}`, data);\n  }\n  checkCategory(name: string){\n    return this.http.post(`${environment.url_api}/category/availability`, {name});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\nimport {Venta} from '../models/venta.model'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompraService {\n\n  constructor(\n    private http: HttpClient\n  ) { \n    \n  }\n  \n  getAllCompras(){\n      return this.http.get<Venta[]>(`${environment.url_api}purchase/all`);\n\n  }\n\n  getCompraId(id: number){\n    return this.http.get<Venta>(`${environment.url_api}purchase/${id}`);\n  }\n  createVenta(venta: Venta){\n    console.log(typeof(venta));\n    return this.http.post<Venta>(`${environment.url_api}purchase/save`,JSON.stringify(venta), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  obtenerProductoByidCliente(id: String){\n\n     return this.http.get<Venta[]>(`${environment.url_api}purchase/client/${id}`)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User, CreateUserDTO } from '../models/user.model';\nimport { environment } from './../../../environments/environment';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl= 'https://venta-inti.herokuapp.com/inti/api/client/'\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  create(dto: CreateUserDTO){\n      return this.http.post(`${environment.url_api}client/save`, dto);\n  }\n\n  getClientById(id: string){\n   return this.http.get<User>(`${environment.url_api}client/ClientId/${id}`);\n  }\n\n  getAll(){\n       return this.http.get<User[]>(`${environment.url_api}client/all`)\n  }\n\n  getByName(name: string){\n    return this.http.get(`${environment.url_api}client/ClientName/${name}`);\n  }\n\n}\n","import { AbstractControl } from '@angular/forms';\nimport { map } from 'rxjs/operators';\nimport { CategoriesService } from '../core/services/categories.service';\n\nexport class MyValidators {\n\n  static isPriceValid(control: AbstractControl) {\n    const value = control.value;\n    console.log(value);\n    if (value > 10000) {\n      return {price_invalid: true};\n    }\n    return null;\n  }\n\n  static validPassword(control: AbstractControl){\n    const value= control.value;\n    if(!containsNumber(value)){\n        return {invalid_password: true};\n    }\n    return null;\n  }\n  \n  static matchPassword(control: AbstractControl){\n\n    const password= control.get('password').value;\n    const confirmPassword= control.get('confirmPassword').value\n\n    if(password===confirmPassword){\n        return null;\n    }\n    return {match_password: true};\n\n  }\n  static validateCategory( service: CategoriesService){\n    return (control: AbstractControl)=>{\n     const value= control.value;\n     return service.checkCategory(value)\n       .pipe(\n        map((response: any)=>{\n          const isAvailable= response.isAvailable;\n\n          if(!isAvailable){\n              return {not_Available:true}\n          }\n          return null;\n        })\n       )\n\n    }\n\n  }\n\n}\nfunction containsNumber( value: string){\n  return value.split('').find(v=> isNumber(v)) !==undefined;\n}\n\nfunction isNumber(value:string) {\n  return !isNaN(parseInt(value,10))\n}\n"]}