{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/components/login/login.component.ts","webpack:///src/app/auth/components/login/login.component.html","webpack:///src/app/auth/components/register/register.component.ts","webpack:///src/app/auth/components/register/register.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","formBuilder","router","authService","showPassword","token","profile","password","errorMessage","buildForm","event","preventDefault","form","valid","value","loginm","email","subscribe","name","jwt","navigate","error","reset","user","group","required","get","login","selector","templateUrl","styleUrls","RegisterComponent","userService","buttonPressed","password1","showPassword1","nextId","generateId","console","log","letters","randomLetters","i","randomIndex","Math","floor","random","length","create","newClient","id","lastName","minLength","validPassword","confirmPassword","rolClient","companyName","conditionCliente","validators","matchPassword","typeFiel","valueChanges","companyNameFiel","setValidators","updateValueAndValidity","idValue","setValue","getRandomLetters","register","imprimir"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AuthRoutingModule } from './auth-routing.module';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\n\nimport { MaterialModule } from './../material/material.module';\nimport { SharedModule } from './../shared/shared.module';\n\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    SharedModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { User } from '../../../core/models/user.model';\n\nimport { AuthService } from './../../../core/services/auth.service';\n\nimport {HeaderComponent} from  '../../../shared/components/header/header.component'\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  showPassword = false;\n  form: FormGroup;\n  token=\"\";\n  profile:User| null=null;\n  password = '';\n  errorMessage='';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    //private headComponent: HeaderComponent\n  ) {\n    this.buildForm();\n  }\n\n  ngOnInit() {\n  }\n\n  login(event: Event) {\n    //console.log(\"Aqui solicitando1\");\n    event.preventDefault();\n    if (this.form.valid) {\n      //console.log(\"Aqui solicitandod3\");\n      const value = this.form.value;\n      this.authService.loginm(value.email, value.password)\n      .subscribe(name=>{\n        this.token=name.jwt;\n        //console.log(this.token);\n        this.router.navigate(['/home'])\n        //this.headComponent.getProfile();\n      },(error)=>{\n        //console.log(\"hola\",error);\n        this.errorMessage='Error al autenticar vuelva a ingresar los datos correctos'\n        this.form.reset();\n      })\n     ;\n \n    }\n  }\n\n  getProfile(){\n\n    this.authService.profile(this.token)\n    .subscribe(user=>{\n      this.profile=user;\n    });\n  }\n\n  private buildForm() {\n    this.form = this.formBuilder.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n\n  togglePassword() {\n    this.password=this.form.get('password').value;\n    this.showPassword = !this.showPassword;\n  }\n}\n","\n\n\n\n<form [formGroup]=\"form\" (ngSubmit)=\"login($event)\">\n  <div class=\"figure-general-login\">\n    <img class=\"img-logo\" src=\"../../../../assets/svg/intilogo.svg\" alt=\"\">\n  </div>\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>Inicia sesión</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <div class=\"row\">\n          <div class=\"col-xs\">\n            <mat-form-field>\n              <mat-label>E-mail</mat-label>\n              <input placeholder=\"email\" formControlName=\"email\" matInput type=\"text\">\n            </mat-form-field>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-xs\">\n            <mat-form-field>\n              <mat-label>Contraceña</mat-label>\n              \n              <input placeholder=\"password\" formControlName=\"password\" matInput type=\"password\" *ngIf=\"!showPassword\">\n              <input type=\"text\" formControlName=\"password\" matInput name=\"password1\" [value]=\"password\" *ngIf=\"showPassword\">\n              <mat-icon style=\"cursor:pointer\" (click)=\"togglePassword()\" matSuffix *ngIf=\"!showPassword\">visibility</mat-icon>\n              <mat-icon style=\"cursor:pointer\"  (click)=\"togglePassword()\" matSuffix *ngIf=\"showPassword\">visibility_off</mat-icon>\n            </mat-form-field>\n          </div>\n        </div>\n      </mat-card-content>\n      <mat-card-actions>\n        <button [disabled]=\"form.invalid\" mat-raised-button type=\"submit\">Iniciar sesión</button>\n\n      </mat-card-actions>\n\n\n    </mat-card>\n    <div class=\"cuestions-grid\">\n      <span routerLink=\"/auth/register\" >Crear una cuenta</span>\n      <span >¿Olvidó su contraceña?</span>\n    </div>\n    <span style=\"color: rgb(255, 0, 0);\" *ngIf=\"errorMessage!=''\">\n      {{errorMessage}}\n    </span>\n  </form>\n \n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from './../../../core/services/auth.service';\nimport { UserService} from './../../../core/services/user.service';\nimport { MyValidators } from 'src/app/utils/validators';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\n\n\nexport class RegisterComponent implements OnInit {\n\n  \n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private userService: UserService\n  ) {\n    this.buildForm();\n  }\n  buttonPressed = false;\n\n  ngOnInit() {\n    let nextId=0;\n   function generateId() {\n      return nextId++;\n    }\n  }\n imprimir(){\n  console.log(this.form.value);\n }\n\n\n\n\n //generador de id\n\n getRandomLetters(): string {\n  const letters = '0ab1cd2efgh3ijklm4no5pq6rst7uv8wx9yz';\n  let randomLetters = '';\n\n  for (let i = 0; i < 3; i++) {\n    const randomIndex = Math.floor(Math.random() * letters.length);\n    randomLetters += letters[randomIndex];\n  }\n\n  return randomLetters;\n}\n\n\n //generador de id\n\n\n  register() {\n    if (this.form.valid) {\n      const value = this.form.value;\n      //console.log(value);\n      this.userService.create(value)\n      .subscribe(newClient=>{\n        //console.log(newClient);\n        this.router.navigate(['/auth/login']);\n      });\n    }\n  }\n\n  private buildForm() {\n    this.form = this.formBuilder.group({\n      id: [''],\n      name: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6), MyValidators.validPassword]],\n      confirmPassword: ['', [Validators.required]],\n      rolClient: ['', [Validators.required]],\n      companyName:['',[Validators.required]],\n      conditionCliente:['true']\n    },{\n      validators: MyValidators.matchPassword\n    });\n\n    this.typeFiel.valueChanges\n      .subscribe(value=>{\n        if(value==='user'){\n\n          this.companyNameFiel.setValidators([Validators.required]);\n        } else{\n          this.companyNameFiel.setValidators(null);\n        }\n        this.companyNameFiel.updateValueAndValidity();\n\n      })\n\n     this.idValue.setValue(this.getRandomLetters()) \n  }\n\n  get idValue(){\n    return this.form.get('id');\n  }\n\n  get typeFiel(){\n    return this.form.get('rolClient');\n  }\n\n  get companyNameFiel(){\n    return this.form.get('companyName');\n  }\n\n  password = '';\n  password1 = '';\n  showPassword = false;\n  showPassword1 = false;\n\n\n  togglePassword() {\n    this.password=this.form.get('password').value;\n    this.showPassword = !this.showPassword;\n  }\n  togglePassword1() {\n    this.password1=this.form.get('confirmPassword').value;\n    this.showPassword1 = !this.showPassword1;\n  }\n\n\n\n  //generador de id\n  \n\n\n}\n\n\n","<form [formGroup]=\"form\" (ngSubmit)=\"register()\">\n\n  <div class=\"figure-general-login\">\n    <img class=\"img-logo\" src=\"../../../../assets/svg/intilogo.svg\" alt=\"\">\n  </div>\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title style=\"margin-left: 130px;\">Registro</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n\n\n      <div class=\"row\">\n        <div class=\"col-xs\">\n          <mat-form-field>\n            <mat-label>Nombre</mat-label>\n            <input placeholder=\"Nombre\" formControlName=\"name\" matInput type=\"email\">\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs\">\n          <mat-form-field>\n            <mat-label>Apellido</mat-label>\n            <input placeholder=\"Apellido\" formControlName=\"lastName\" matInput type=\"email\">\n          </mat-form-field>\n        </div>\n      </div>\n\n\n      <div class=\"row\">\n        <div class=\"col-xs\">\n          <mat-form-field>\n            <mat-label>Email</mat-label>\n            <input placeholder=\"email\" formControlName=\"email\" matInput type=\"email\">\n          </mat-form-field>\n        </div>\n      </div>\n\n\n\n      <div class=\"row\">\n        <div class=\"col-xs\">\n          <mat-form-field>\n            <mat-label>Password</mat-label>\n            <input placeholder=\"password\" formControlName=\"password\" matInput type=\"password\" *ngIf=\"!showPassword\">\n            <input type=\"text\" formControlName=\"password\" matInput name=\"password1\" [value]=\"password\" *ngIf=\"showPassword\">\n            \n            \n            \n            <div *ngIf=\"form.get('password').touched && form.get('password').invalid\">\n\n                <mat-error *ngIf=\"form.get('password').hasError('invalid_password')\">\n                  debe tener un numero en la contraceña\n                </mat-error>\n            </div>\n            <mat-icon  (click)=\"togglePassword()\" matSuffix *ngIf=\"!showPassword\">visibility</mat-icon>\n            <mat-icon (click)=\"togglePassword()\" matSuffix *ngIf=\"showPassword\">visibility_off</mat-icon>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs\">\n          <mat-form-field>\n            <mat-label>Confirm Password</mat-label>\n            <input placeholder=\"password\" formControlName=\"confirmPassword\" matInput type=\"password\" *ngIf=\"!showPassword1\">\n            <input type=\"text\" matInput formControlName=\"confirmPassword\" name=\"password2\" [value]=\"password1\" *ngIf=\"showPassword1\">\n            <div *ngIf=\"form.get('confirmPassword').touched && form.errors\">\n              <mat-error *ngIf=\"form.hasError('match_password')\">\n                La contraceña debe ser igual\n              </mat-error>\n            </div>\n            <mat-icon (click)=\"togglePassword1()\" matSuffix *ngIf=\"!showPassword1\">visibility</mat-icon>\n            <mat-icon (click)=\"togglePassword1()\"  matSuffix *ngIf=\"showPassword1\">visibility_off</mat-icon>\n          </mat-form-field>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs\">\n            <mat-radio-group formControlName=\"rolClient\" arial-label=\"Select an option\">\n              <mat-radio-button style=\"margin-right: 10px;\" value=\"client\">Cliente</mat-radio-button>\n              <mat-radio-button value=\"user\">Usuario</mat-radio-button>\n            </mat-radio-group>\n        </div>\n      </div>\n\n      <div *ngIf=\"form.get('rolClient').value==='user'\" class=\"row\">\n        <div class=\"col-xs\">\n          <mat-form-field>\n            <mat-label>Clave de empresa</mat-label>\n            <input placeholder=\"Clave\" formControlName=\"companyName\" matInput type=\"text\">\n          </mat-form-field>\n        </div>\n        <div *ngIf=\"form.get('companyName').value!='inti'\">\n\n          <mat-error *ngIf=\"form.get('companyName').value!='inti'\">\n            No coincide con la clave de la empresa\n          </mat-error>\n      </div>\n      </div>\n\n    </mat-card-content>\n    <mat-card-actions>\n      <button (click)=\"imprimir()\" [disabled]=\"form.invalid\" mat-raised-button type=\"submit\">Registro</button>\n    </mat-card-actions>\n  </mat-card>\n\n</form>\n\n"]}