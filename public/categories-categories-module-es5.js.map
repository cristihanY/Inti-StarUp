{"version":3,"sources":["webpack:///src/app/admin/categories/categories-routing.module.ts","webpack:///src/app/admin/categories/categories.module.ts","webpack:///src/app/admin/categories/components/categories/categories.component.ts","webpack:///src/app/admin/categories/components/categories/categories.component.html","webpack:///src/app/admin/categories/components/category-form/category-form.component.ts","webpack:///src/app/admin/categories/components/category-form/category-form.component.html","webpack:///src/app/admin/categories/containers/category/category.component.ts","webpack:///src/app/admin/categories/containers/category/category.component.html"],"names":["routes","path","component","CategoriesRoutingModule","forChild","imports","exports","CategoriesModule","declarations","CategoriesComponent","categoriesService","categories","displayedColumns","getCategories","getAllCategories","subscribe","selector","templateUrl","styleUrls","CategoryFormComponent","formBuilder","router","storage","route","isNew","create","update","buildForm","letras","letra_random","i","indice_aleatorio","Math","floor","random","length","cami","charAt","form","group","categoryId","category","active","console","log","value","valid","emit","markAllAsTouched","event","image","target","files","name","generateNum","ref","task","upload","snapshotChanges","pipe","urlImage$","getDownloadURL","url","imageField","setValue","data","patchValue","get","save","CategoryComponent","params","id","getCategory","createCategory","rta","navigate","updateCategory"],"mappings":"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","file":"categories-categories-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CategoriesComponent } from './components/categories/categories.component';\nimport { CategoryFormComponent } from './components/category-form/category-form.component';\nimport { CategoryComponent } from './containers/category/category.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CategoriesComponent\n  },\n  {\n    path: 'create',\n    component: CategoryComponent\n  },\n  {\n    path: 'edit/:id',\n    component: CategoryComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CategoriesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from './../../material/material.module';\n\nimport { CategoriesRoutingModule } from './categories-routing.module';\nimport { CategoriesComponent } from './components/categories/categories.component';\nimport { CategoryFormComponent } from './components/category-form/category-form.component';\nimport { CategoryComponent } from './containers/category/category.component';\n\n\n@NgModule({\n  declarations: [CategoriesComponent, CategoryFormComponent, CategoryComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    CategoriesRoutingModule,\n  ]\n})\nexport class CategoriesModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CategoriesService } from './../../../../core/services/categories.service';\nimport { Category } from './../../../../core/models/category.model';\n@Component({\n  selector: 'app-categories',\n  templateUrl: './categories.component.html',\n  styleUrls: ['./categories.component.scss']\n})\nexport class CategoriesComponent implements OnInit {\n  //categories: Category[] = [];\n  categories: Category[] = [\n ];\n\n  displayedColumns: string[] = ['id', 'name', 'image', 'actions'];\n  constructor(\n    private categoriesService: CategoriesService,\n  ) { \n    this.getCategories();\n  }\n\n  ngOnInit(): void {\n  }\n  private getCategories() {\n    this.categoriesService.getAllCategories()\n    .subscribe(categories => {\n      this.categories = categories;\n    });\n  }\n}\n","<a mat-raised-button routerLink=\"create\">Crear nueva categoría</a>\n\n<table mat-table [dataSource]=\"categories\" class=\"mat-elevation-z8 products-table\">\n    <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef>ID</th>\n        <td mat-cell *matCellDef=\"let category\">{{ category.categoryId }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef>Nombre</th>\n        <td mat-cell *matCellDef=\"let category\">{{ category.category }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"image\">\n        <th mat-header-cell *matHeaderCellDef>Condición</th>\n        <td mat-cell *matCellDef=\"let category\">{{ category.active }}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef>Acciones</th>\n        <td mat-cell *matCellDef=\"let category\">\n            <a mat-raised-button [routerLink]=\"['edit', category.categoryId]\">Editar</a>\n            <button mat-raised-button color=\"warn\">Eliminar</button>\n        </td>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>","import { Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport { Router,ActivatedRoute, Params } from '@angular/router';\nimport {finalize} from 'rxjs/operators'\nimport { FormControl, Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport {CategoriesService} from './../../../../core/services/categories.service';\nimport { AngularFireStorage} from '@angular/fire/storage';\nimport { MyValidators } from 'src/app/utils/validators';\nimport { Category } from 'src/app/core/models/category.model';\n\n \n@Component({\n  selector: 'app-category-form',\n  templateUrl: './category-form.component.html',\n  styleUrls: ['./category-form.component.scss']\n})\nexport class CategoryFormComponent implements OnInit {\n\n  \n  form: FormGroup;\n  isNew= true;\n //@Input() category: Category;\n @Input()\n  set category(data: Category){\n    if(data){\n      //this.isNew=false;\n      this.form.patchValue(data);\n      console.log(data);\n    }\n  };\n  @Output() create= new EventEmitter();\n  @Output() update= new EventEmitter();\n  categoryId: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private categoriesService: CategoriesService,\n    private router: Router,\n    private storage: AngularFireStorage,\n    private route: ActivatedRoute,\n  ) { \n    this.buildForm();\n  }\n\n  generateNum (){\n    let letras = 'ab0cdef1ghi2jklmn3opqrs4tuvwx5yzABC6DEFG7HIJKLM8NOPQRST9UVWXYZ';\n    let letra_random='';\n    for (let i = 0; i <= 6; i++) {\n      let indice_aleatorio = Math.floor(Math.random() * letras.length);\n      let cami=letras.charAt(indice_aleatorio);\n      letra_random+=cami;\n    }\n    return letra_random;\n  }\n\n  ngOnInit(): void {\n\n\n\n  }\n\n  private buildForm() {\n    this.form = this.formBuilder.group({\n      categoryId: ['', ],\n      category: ['',],\n      active: ['true',]\n    });\n  }\n\n  get nameField() {\n    return this.form.get('name');\n  }\n\n  get imageField() {\n    return this.form.get('image');\n  }\n\n  imprimir(){\n    console.log(this.form.value);\n  }\n\n  save(){\n    console.log(\"llegamos1\");\n    if(this.form.valid){\n      console.log(\"llegamos1.1\")\n      if(this.isNew){\n        console.log(\"llegamos1.2\")\n        this.create.emit(this.form.value);\n        //this.updateCategory();\n          \n      }else{\n        //this.createCategory();\n        console.log(\"llegamos1.3\")\n        this.update.emit(this.form.value);\n      }\n    }else{\n      this.form.markAllAsTouched();\n    }\n    \n  }\n\n\n\n  uploadFile(event){\n    const image= event.target.files[0];\n    const name = `image_${this.generateNum()}.png`;\n    const ref= this.storage.ref(name);\n    const task= this.storage.upload(name, image);\n    console.log('aqui esta');\n    task.snapshotChanges()\n    .pipe(\n      finalize(()=>{\n        const urlImage$= ref.getDownloadURL();\n        urlImage$.subscribe(url=>{\n          console.log(url);\n          this.imageField.setValue(url);\n        })\n\n      })\n    )\n      .subscribe();\n  }\n  \n\n}\n\n\n","<form [formGroup]=\"form\" (ngSubmit)=\"save()\" >\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>Categoría</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"row\">\n        <div class=\"col-xs\">\n          <mat-form-field >\n            <mat-label>Nombre</mat-label>\n            <input\n              placeholder=\"Nombre\"\n              formControlName=\"category\"\n              matInput\n              type=\"text\"\n            />\n          </mat-form-field>\n        </div>\n      </div>\n    </mat-card-content>\n    <mat-card-actions>\n      <button mat-raised-button type=\"submit\">\n        <span *ngIf=\"isNew\">Crear categoría</span>\n        <span *ngIf=\"!isNew\">Editar categoría</span>\n      </button>\n    </mat-card-actions>\n  </mat-card>\n\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Router,ActivatedRoute, Params } from '@angular/router';\nimport {finalize} from 'rxjs/operators'\nimport { FormControl, Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport {CategoriesService} from './../../../../core/services/categories.service';\nimport { AngularFireStorage} from '@angular/fire/storage';\nimport { MyValidators } from 'src/app/utils/validators';\nimport { Category } from 'src/app/core/models/category.model';\n\n@Component({\n  selector: 'app-category',\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.scss']\n})\nexport class CategoryComponent implements OnInit {\n  category: Category;\n  constructor(\n    private categoriesService: CategoriesService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.route.params.subscribe((params: Params)=>{\n        const id= params.id;\n        if(params.id){\n          this.getCategory(params.id);\n        }\n    });\n}\n createCategory(data){\n  console.log(data);\n  console.log(\"llegamos2\");\n  this.categoriesService.createCategory(data)\n    .subscribe(rta=>{\n        console.log(rta);\n        this.router.navigate(['./admin/categories']);\n    })\n}\n\n updateCategory(data){\n  console.log(\"llegamos2\");\n  this.categoriesService.updateCategory(this.category.categoryId,data)\n    .subscribe(rta=>{\n        console.log(rta);\n        this.router.navigate(['./admin/categories']);\n    })\n}\n\nprivate getCategory(id: string){\n  console.log(\"llegamos aqui\");\n  this.categoriesService.getCategory(id)\n   .subscribe(data=>{\n    this.category=data;\n    //Imprime todos los valores de la data en el html\n    ///this.form.patchValue(data);\n    // cambio uno por uno\n    // this.nameField.setVAlue(data.name);\n   });\n   \n}\n\n}\n","<app-category-form\n(create)=\"createCategory($event)\"\n(update)=\"updateCategory($event)\"\n[category]=\"category\"\n></app-category-form>\n"]}